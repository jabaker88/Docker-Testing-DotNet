<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay" >
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => Close()">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>@Message</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="() => Confirm()">Confirm</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    [Parameter]
    public string Message { get; set; } = string.Empty;

    [Parameter]
    public string Title { get; set; } = string.Empty;

    public event Action? OnConfirm;
    //public event EventHandler<Task>? OnConfirmEvent;

    public void Open(Action? onConfirm = null)
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;

        //set event if provided and not already assigned
        if (onConfirm != null && OnConfirm == null)
            OnConfirm = onConfirm;

        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    public void Confirm()
    {
        OnConfirm?.Invoke();
        //OnConfirmEvent?.Invoke(this, Task.CompletedTask);

        Close();
    }
}
